mse version: 2.0.0
short name: Egg MTGA
full name: Egg MTGA Draft
position hint: 009
icon: icon.png
version: 2018-01-11

depends on:
	package: magic.mse-game
	version: 2008-08-08

game: magic
create directory: true
file type: *.txt|*.txt|*.*|*.*

option field:
	type: choice
	name: export images
	choice: no
	choice: .jpg
	choice: .png
	choice: .full.jpg
	choice: .full.png
	description: Export images
	
option field:
	type: choice
	name: split dfcs
	choice: yes
	choice: no
	description: Split DFC images

script:
	fix_tm := replace@(match:"™", replace:"TM")
	apos_fix := replace@(match:"’", replace:"'")
	trail_fix := replace@(match:" +$", replace:"")
	clean_names := {trail_fix(apos_fix(remove_tags(input)))}

	mana_script := 	replace@(match:"(2|H|W|U|B|R|G|S|C|F)/(W|U|B|R|G|S|C)", replace:{"\{"+_1+"/"+_2+"\}"})+
	replace@(match:"(X|Y|Z|F|W|U|B|R|G|S|C)", in_context:"(?<!\{)(?<!/)<match>", replace:{"\{"+_1+"\}"})+
	replace@(match:"([1-9][0-9])", in_context:"(?<!\{)(?<!/)<match>", replace:{"\{"+_1+"\}"})+
	replace@(match:"([0-9])", in_context:"(?<!\{)(?<!/)<match>(?!})", replace:{"\{"+_1+"\}"})


	exporter_name_filter := filter_text@(match:"!exporte?r?name [^\n]+")
	exporter_name_grabber := replace@(match:"!exporte?r?name ", replace:"")
	card_name := { 
		test := exporter_name_grabber(exporter_name_filter(card.notes))
		clean_names(if test != "" then test else card.name)
	}
	card_rarity := {
		if card.rarity == "mythic rare" then "mythic" else card.rarity
	}
	corrected_card_number := { if exporter_num_grabber(exporter_num_filter(card.notes)) != "" then exporter_num_grabber(exporter_num_filter(card.notes)) else if card.custom_card_number != "" then trim_zeroes(card.custom_card_number) else card_number() }

	write_header := {
		"[CustomCards]" +
		"
		["
	}

	write_card := {
		"" + card_name() + "\t" + card_rarity() +"\t" + mana_script(card.casting_cost) + "\t" + card.type + "\t" + card.shape + "
	"
	}
	write_footer := {
		"	]
		"
	}

	write_commons := {
		for each card in cards do if card.rarity == "common" then "30 "+card_name()+"
			" else ""
	}

	write_uncommons := {
		for each card in cards do if card.rarity == "uncommon" then "9 "+card_name()+"
			" else ""
		
	}

	write_rares := {
		for each card in cards do if card.rarity == "rare" then "3 "+card_name()+"
			" else ""
		
	}

	write_mythics := {
		for each card in cards do if card.rarity == "mythic rare" then "1 "+card_name()+"
			" else ""
		
	}
	
	write_all_images := {
		for each card in cards do
			if contains(card.shape, match:"double") then write_image_file(crop(input: to_card_image(card), width: 375, height: 523, offset_x: 0, offset_y: 0), file:card_name()+"_front"+options.export_images) + write_image_file(crop(input: to_card_image(card), width: 375, height: 523, offset_x: 377, offset_y: 0), file:card_name()+"_back"+options.export_images)
			else write_image_file(card, file:card_name()+options.export_images)
	}

	write_booster := {
		"[RareSlot(1)]
		"+ write_rares() + write_mythics()+
		"[UncommonSlot(3)]
		"+ write_uncommons()+
		"[CommonSlot(10)]
		"+ write_commons()
	}

	write_images := if options.export_images == "no" then "" else if options.split_dfcs == "yes" then write_all_images() else for each card in cards do write_image_file(card, file:card_name()+options.export_images)
	write_cards := for each card in cards do write_card()
	to_string(to_text(write_header() + write_cards + write_footer() + write_booster()))
